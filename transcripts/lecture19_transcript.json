{"documentId": "lecture19", "section": [{"text": "Okay, good afternoon, good morning or good night?", "metadataJson": "{\"start\":3,\"end\":7}"}, {"text": "Let's get started. Today I want to talk about bitcoin, and the reason I want to talk about it is it solves a hard problem, namely achieving consensus with byzantine participants.", "metadataJson": "{\"start\":9,\"end\":31}"}, {"text": "And it solves it. So we visited, I mean, participants that might be malicious or adversarial, and it solves this problem. In the context of completely open systems, people can join and leave the system at will, and some of them may be malicious and yet achieves consensus on the order in which transaction happens. Actually, in a very challenging context of actually really doing it with money involved, the design looks a little bit like has aspects of sunder. So in the sense there's a signed log of operations, in this case, transactions, but unlike in sunder, that actually, you know, can handle forks.", "metadataJson": "{\"start\":41,\"end\":94}"}, {"text": "And so most of the, you know, the many aspects that are interesting to talk about with respect to bitcoin, but mostly I'm going to focus on sort of the, sort of the distributed systems aspect of this particular paper. This paper is a bit unusual or quite unusual. First of all, this is not a paper out of the sort of scientific literature that we've been reading so far. It comes out of a different part of the world. It is pseudo anonymous.", "metadataJson": "{\"start\":98,\"end\":127}"}, {"text": "And Ed has particularly gripe with financial institutions. And you can have all kinds of opinions about whether bitcoin in general and cryptocurrency in general. But from the perspective of distributed systems, this is a hugely successful system. This is really, truly an open system that can tolerate byzantine participants and achieve consensus. Really, the focus on this lecture is trying to understand how actually achieves that particular aspect.", "metadataJson": "{\"start\":134,\"end\":166}"}, {"text": "Any questions just to before I dive in?", "metadataJson": "{\"start\":169,\"end\":172}"}, {"text": "Okay, so as I mentioned, the context is here, financial transactions. And so there's free overriding concerns, you know, when, when transactions are involved or money transactions are involved. First of all, of course, you know, there's the concern of outright forgery where basically, you know, people cook up, you know, transactions out of thin air and enter them in the log and, you know, try to mislead other participants. You know, that actually they're spending their, their own money while spending somebody else's money. And, you know, this problem is reasonable, straightforward for solved, and in a very sort of similar style to sunder, but basically signing operations make it hard to actually forge.", "metadataJson": "{\"start\":180,\"end\":232}"}, {"text": "And in fact, you know, so the general setting here correctly is the same as in some very well, you know, the byzantine participants are very, very, very powerful. We're going to be assuming that the crypto systems actually work and cannot be compromised. And so a lot of the core functionality or the basis on which we might conclude that actually things are secure are all going to come down to the fact that the underlying cryptography is correct. So that's one challenge. The second challenge, which is the one that the paper spends most of its time talking about, is double spending.", "metadataJson": "{\"start\":232,\"end\":268}"}, {"text": "So you literally have some bitcoins that you accumulated and business participant tries to spend twice that same bitcoin. And of course, we want to avoid that particular problem. I do. And the main ideas we'll see is a public ledger or a public log of all the transactions, so that you can see if the transaction actually, if that money was already spent in an early transaction and really trying to achieve consensus on what is actually in the log is at the heart of the paper, then of course, in addition to these two, there's sort of the obvious other problem, which paper doesn't really talk much about. And we're also not going to talk much about, which is just theft, where somebody actually steals somebody else's private key and therefore can spend money or bitcoins using that particular private key.", "metadataJson": "{\"start\":273,\"end\":331}"}, {"text": "And it turns out to be, in practice, a serious problem. People store their wallets with their signing keys on computers. Computers can be broken into and therefore people can break it over, steal somebody else's money. And I think it's a serious problem in practice. I'm not going to be spending much time talking about it again, I want to focus on the distributed systems aspects.", "metadataJson": "{\"start\":331,\"end\":356}"}, {"text": "Any questions about the challenges?", "metadataJson": "{\"start\":359,\"end\":360}"}, {"text": "Okay, let's look at the transaction then. You know, what's actually in it. So this is basically what is in the ledger.", "metadataJson": "{\"start\":366,\"end\":373}"}, {"text": "I'm going to simplify this greatly.", "metadataJson": "{\"start\":381,\"end\":384}"}, {"text": "Some of the details actually don't really matter to the discussion that we're going to have. And, you know, the first order you can just think about it is that every transaction is a record, and that record has a public key of the user for which, you know, the. The money is intended. So this is the destination, a hash of the previous transaction, you know, for this particular bitcoin, and a signature with the private key who is basically the previous owner of that particular bitcoin. And that's sort of, you can think about this as the source.", "metadataJson": "{\"start\":386,\"end\":441}"}, {"text": "So basically, u two is making, you know, granting, you know, bitcoins or transferring bitcoins from u two to you one so that you can spend them. Of course, there's all kinds of other stuff in it. Like there's an amount in it, fractional amount. There are many destinations and many sources possible. You know, many ins and outs.", "metadataJson": "{\"start\":441,\"end\":461}"}, {"text": "But we're going to basically all ignore it and just focus on this simplified description. Turns out the transactions are encoded also not sort of like sort of passive records, but basically in a little scripting language. And also going to ignore all those aspects in step. I want to focus on this thing and talk a little bit, show a little example so that we get a little bit of a handle of actually what we're looking at in terms of the challenges.", "metadataJson": "{\"start\":463,\"end\":492}"}, {"text": "So I look at an example ledger and sort of try to understand actually, you know, what it means to be a bitcoin or what a coin is, because it's not like sort of a single thing. It really comes down to it's actually sha one of the last transaction that is sort of what a coin is. So let's say y owns a coin and received from x. And so that means that there's somewhere in the ledger, there's sort of a set of transactions that transfer the money or the coin or parts of the coin to y. And so let's see, like somewhere maybe there's an entry in the letter somewhere in some period of time where x actually received some bitcoins and now granted, has given it to y.", "metadataJson": "{\"start\":495,\"end\":550}"}, {"text": "So there's another transaction in the ledger that basically records that fact. And so that might have the pop key of y as the destination, the hash transaction six.", "metadataJson": "{\"start\":551,\"end\":563}"}, {"text": "So that uniquely identifies a shorthand handle for actually uniquely identifying transaction six. And so we have the ledger or record that we think is transaction six. Then we can recompute the hash of that transaction compared to the one that's stored in transaction seven. And we are truly determined that basically transaction six was the source for this transaction seven. Or it's based.", "metadataJson": "{\"start\":566,\"end\":588}"}, {"text": "The previous transaction was transaction six for this particular coin. And this is assigned by X. Now, so this is sort of a situation where y obtained basically some bitcoins for an x. And now y wants to spend, for example, maybe y wants to buy a latte from z and so it's going to transfer some money to z. So maybe we'll see another transaction in the ledger which is going to be of the form.", "metadataJson": "{\"start\":588,\"end\":622}"}, {"text": "This is one that actually y is going to add pop of z hash of the previous coin, which is the last injection for that coin. So that's t seven in a send by y.", "metadataJson": "{\"start\":622,\"end\":641}"}, {"text": "And basically z wants to, before z actually hands over the latter to y. You need to do some verification to make sure that this actually is a legit transaction. So we'll look up transaction seven and compute the hash of it double check that the hash actually corresponds to the one that actually is listed in transaction.", "metadataJson": "{\"start\":646,\"end\":669}"}, {"text": "In transaction eight, if the hash checks out. So transaction seven is indeed, we believe that the one that actually, transaction eight refers to, z looks up the public key in transaction seven for y, which is the public key. Y then verifies that. Use that public key to verify the signature of this transaction. And the signature, of course, covers the whole transaction.", "metadataJson": "{\"start\":671,\"end\":699}"}, {"text": "And if the signature checks out, then z can be confident that actually the ledger contains a transaction that basically transfers some amount of money from y to z. And so at this point, you know, the verification, you know, z verifies. And, you know, if it's okay, you know, whatever, ship the latte and not, you know, reject.", "metadataJson": "{\"start\":699,\"end\":729}"}, {"text": "And again, like before in, you know, Sunder and in all these sort of schemes, you know, we're relying here on the fact that basically y was careful with its private key.", "metadataJson": "{\"start\":732,\"end\":744}"}, {"text": "So, yeah, we have to assume that y didn't disclose in any way its private key.", "metadataJson": "{\"start\":751,\"end\":761}"}, {"text": "Because if anybody asks this private key, then basically anybody could cup up the signature and he's able to spend basically wise money. Although maybe from the perspective of the CJ doesn't really care. Okay, so that's sort of the basic plan in terms of having a record. And this is pretty good.", "metadataJson": "{\"start\":764,\"end\":789}"}, {"text": "There's a record of the transaction that happened. When she receives a transaction, they can check whether this is a valid transaction and that wants it to decide whether to actually accept the money and deliver the goods. So one key challenge now sort of left. We're seeing that outright forgery is difficult.", "metadataJson": "{\"start\":792,\"end\":817}"}, {"text": "Well, you know, we need to think a little bit about the double spending. And so the double spending problem is as follows. Let's say instead of creating two record, one records, as in this particular example, in transaction eight, z actually creates over y creates two records.", "metadataJson": "{\"start\":820,\"end\":836}"}, {"text": "One record is basically giving you the one that we just saw. T eight y two z with the hash of seven.", "metadataJson": "{\"start\":847,\"end\":857}"}, {"text": "But let's see, let's assume that actually y also tries to double spend its money. So it creates a second transaction, t eight prime, where, you know, the records is basically the same, except, you know, the money, you know, maybe goes to q and a, pass the hash of t seven, and of course, you know, signed by y, signed by y.", "metadataJson": "{\"start\":860,\"end\":882}"}, {"text": "Now, you know, let's say, you know, both q and z are latte stores. If, you know, z accepts t eight, as it would, because, you know, everything will check out as we saw in the previous slide, then z would actually ship a lot a to y. When q not knowing anything, maybe about this other ta transaction. Sees this ta, the transaction checks out. It's indeed the case that the money in t seven was transferred to y.", "metadataJson": "{\"start\":887,\"end\":916}"}, {"text": "The thing is checked with the signature for y is valid. And we'll say, okay, great, thank you for the money. I'll ship you also. Yeah. Now, so we're in this bad position were why by double spending or succeeded in double spending and got two lattes.", "metadataJson": "{\"start\":916,\"end\":935}"}, {"text": "Just a problem that basically the paper is really focused on trying to solve.", "metadataJson": "{\"start\":935,\"end\":940}"}, {"text": "The basic approach is sort of similar to what some liver is doing. Let's keep a complete log of all transactions since the beginning of time.", "metadataJson": "{\"start\":945,\"end\":956}"}, {"text": "And the log contains all the transactions, including the order.", "metadataJson": "{\"start\":961,\"end\":968}"}, {"text": "Right. And so let's see. So we sort of put the transactions in whatever. Here we have t six. Here we had t seven.", "metadataJson": "{\"start\":972,\"end\":982}"}, {"text": "So if there's a public record that is ordered of all the transactions, you know, t eight or t eight prime goes first. Let's say ta goes first, and then t eight prime goes in the log. And, you know, if this would happen, then, you know, no problem at all. Right? Because this was the transaction from y to z.", "metadataJson": "{\"start\":982,\"end\":1003}"}, {"text": "This was the transaction from y to q. And, you know, basically when q validates, when z two validates, interjection, everything looks perfect as exactly as before. When q validates the transaction, in addition to the checks that we just looked at, it actually looks in the log. Q looks in the log like the c of t seven basically was already spent.", "metadataJson": "{\"start\":1003,\"end\":1030}"}, {"text": "And, you know, of course, you know, scans back in log, you know, runs into t y, t eight, and, you know, sees that the money has been spent. And so therefore, it will reject t eight prime. All right, so that's the basic plan. And so basically, you know, we reduce this one problem, which is like, how do we actually ensure that all participants in the systems actually agree on this log and all the transactions are in the same slot everywhere and contain the same content, the same hashes, the same signatures, so that we can actually verify the transactions using the scheme laid out on this slide. And so this is where the consensus problem comes in.", "metadataJson": "{\"start\":1041,\"end\":1088}"}, {"text": "And sometimes people refer to the solution here as the Nakamoto consensus protocol. Now, before diving into that protocol, I want to sort of sketch out possible solutions that are not going to work, just to get a little bit of a better sense about what the challenges are that this sort of Nakamoto consensus actually solves.", "metadataJson": "{\"start\":1088,\"end\":1113}"}, {"text": "So design one. There's not really design. It's more sort of an idea to sort of think about and then reject design one. You know, maybe is the easiest design is let's assume we have the server s and the server actually just trusted and we have clients, you know, that, you know, submit transactions, you know, whatever, t six client one, client two whatever this is x, y and z and they just submit these transactions to this trusted server. All the clients trust the server.", "metadataJson": "{\"start\":1115,\"end\":1161}"}, {"text": "Then the server can just produce a log with all the transaction data and order them appropriately, et cetera, et cetera. So if we assume there's a trusted server then this problem is actually reasonable, straightforward to solve. And if that's the setting that we're in, then we're in great shape. You know, we'll replicate the server using some raft type protocol and we're have a full tolerance server. And really the only downside to this particular process is if the clients can just not agree on a single trusted server.", "metadataJson": "{\"start\":1161,\"end\":1196}"}, {"text": "And so for example in the case of bitcoin where you want to do transactions, maybe the rest of the world will not trust the US government to actually implement this server correctly and produce a log. In that case we have multiple different clients cannot agree on a trusted server, then this solution doesn't work. So that's one solution, it's the easy one. But in the case of decentralized design where the participant don't trust any central component, this is not a work of all solution. So now we can consider using sort of the more sunder like approach, modify the scheme slightly and say like okay, good.", "metadataJson": "{\"start\":1197,\"end\":1245}"}, {"text": "We know actually how to deal with untrusted servers. In fact we read a paper about it last week. And so let's assume that this server is actually untrusted. We basically play this under game. The clients produce the logs, read the logs from the server, append their rockets to the clients, append their records to the log submitted back to the server.", "metadataJson": "{\"start\":1245,\"end\":1267}"}, {"text": "The server is basically doing almost nothing else than relaying logs between different clients. We've seen in last week that that approach works really well and can be used. But it has one shortcoming as we saw. Namely the server can present two very different views of the world by basically forking the law. So maybe the log has some prefix, you know, whatever, t 1235-6367 but it has t eight in this one and has another log which indeed has t seven and t eight prime.", "metadataJson": "{\"start\":1267,\"end\":1306}"}, {"text": "And so one fork, you know, we got our t eight on the other fork we have t eight prime. And now like we can't agree or settle in one particular fork. And the server sort of persistently keeps the two worlds apart. Like y isn't z's in one area of the world, accuse another in the world, y always gets the first sort of log, and z always gets a second one log the other way around. Then they will pretend, good.", "metadataJson": "{\"start\":1307,\"end\":1341}"}, {"text": "There's no money earlier spent in t seven in this log. So, you know, TQ will actually accept, you know, t eight prime in this world, and here z will accept, you know, t eight. And so y succeeded in actually double spending. And so this design doesn't work for the particular problem at hand. We need some solution, and this is where the consensus comes in.", "metadataJson": "{\"start\":1341,\"end\":1367}"}, {"text": "We need some solution basically, for the untrusted clients to basically be able to settle on which fork they are on. Okay, so let's think a little bit about that. So think about a more decentralized design where we're just going to replace the server with a network of computers.", "metadataJson": "{\"start\":1367,\"end\":1388}"}, {"text": "And this goes sort of to get closer to the bitcoin design, where there's indeed a network of peers that sort of all collaborate together to provide this single log. Although even some of the participants actually might be malicious and try to do something different. Basically, the idea is that when a client actually creates a transaction, then transaction actually is distributed across a network of peers. In fact, the client one might be a peer himself. So the transaction is spread around, and, you know, everybody, every node in the network actually maintains a log and appends, you know, the transaction to its log.", "metadataJson": "{\"start\":1390,\"end\":1439}"}, {"text": "And the problem that we sort of have left is like, you know, how to agree on an order.", "metadataJson": "{\"start\":1443,\"end\":1448}"}, {"text": "And, you know, we actually have seen, you know, these kinds of sort of systems before. Like, in fact, in raft, you know, we had multiple computers and we're able to agree on an order. Correct. And the basic trick was used for the basic insight is, you know, to basically compute some majority and have majority of the nodes agree that in slot six is going to be transaction t eight, and in slot seven is going to be t eight prime. And that works great.", "metadataJson": "{\"start\":1460,\"end\":1489}"}, {"text": "Correct. If we know exactly how many nodes there are in the system, we know there are five nodes in the system, and then the majority is free. And so we receive a response from three participants, we know we can commit that particular slot. And the problem really here is that this is a decentralized system that is completely open. The system notes may leave and come at any particular point in time, and there is no list of all the participants in the system.", "metadataJson": "{\"start\":1490,\"end\":1521}"}, {"text": "So there's also no clear what actually, what is a majority in a system like that, because it's completely open. And so this, like, the notion of a majority is completely ill defined. So, you know, we need some sort of sort of like our sort of usual game of sort of doing, voting on a majority and then accept the result of the majority is not going to sort of play out. And so this, or the game, this sort of raft, you know, even though it's a consensus protocol, it's not going to really work out because, you know, the sending order we're dealing with is a decentralized, open, distributed system, as opposed to sort of a closed system as in the center of raft.", "metadataJson": "{\"start\":1521,\"end\":1563}"}, {"text": "Does this make sense so far? Let me pause for a second before getting into the more technical part.", "metadataJson": "{\"start\":1567,\"end\":1574}"}, {"text": "All right.", "metadataJson": "{\"start\":1580,\"end\":1581}"}, {"text": "Okay, so how does bitcoin solve this problem?", "metadataJson": "{\"start\":1586,\"end\":1590}"}, {"text": "And the key idea is something that's called proof of work.", "metadataJson": "{\"start\":1594,\"end\":1599}"}, {"text": "Basically the rule is that there's a mine of work to do to actually be able to extend the log.", "metadataJson": "{\"start\":1605,\"end\":1617}"}, {"text": "And the basic rule is that the winner in proof of work, the machine, is able to solve the puzzle first, decides on the next log entry.", "metadataJson": "{\"start\":1620,\"end\":1635}"}, {"text": "And the basic idea that this might, you might actually get some intuition why this actually will work out is because it's basically hard to impersonate the winner.", "metadataJson": "{\"start\":1645,\"end\":1655}"}, {"text": "To actually solve the particular proof of work puzzle that needs to be, to be able to add to the log actually requires a real computer, a month, roughly, of compute time to actually solve the problem. And so if you can solve and demonstrate yourself the problem, you know for sure that somebody actually spent a month of work actually doing it. And this is sort of enough of to convince the rest of the system that real resources were actually spent to be able to append to the log entry. You can maybe think of other types of schemes or wherever, unique IP addresses or things like that, but all those kind of things can be easily falsified. And so this proof of work idea is the core to demonstrate that, yeah, I can really put a month effort into actually to figure out what the next door to compute, be able to be able to append a log entry to the log one just to get that immediately out of the way.", "metadataJson": "{\"start\":1664,\"end\":1739}"}, {"text": "One downside of this proof of work approach is that it actually wastes energy.", "metadataJson": "{\"start\":1739,\"end\":1745}"}, {"text": "And in fact, if you're bitcoin has become so successful that a lot of people are out there are mining and doing this proof of work that the energy bill or the energy consumption of all the combined miners together is incredibly significant, huge. And so complete downside of this approach is the waste of energy. In recent years, there have been other cryptocurrencies or other designs that are based on a different idea instead of proof of work, they're actually based on something that's called proof of stake.", "metadataJson": "{\"start\":1751,\"end\":1790}"}, {"text": "And this is basically sort of the game. There is that let's say you own 3% of the currency, then you get, because your own 3%, you can actually decide for 3% of the log entries which ones are going to be appended.", "metadataJson": "{\"start\":1796,\"end\":1814}"}, {"text": "So this is a completely different approach that doesn't require solving computational intensive puzzles. And that seems to get quite a bit of actually attention. And there are cryptocurrencies that use it. In fact, it looks like one of the more major ones. Ethereum seems to be slated or going in the direction of a proof of stake approach, but bitcoin uses a proof of work approach and so we're just going to proceed with that design.", "metadataJson": "{\"start\":1817,\"end\":1849}"}, {"text": "Any questions?", "metadataJson": "{\"start\":1851,\"end\":1852}"}, {"text": "So I'm just wondering how it's hard to impersonate the winner. Let's say that we have server a and server b, and server a wants to append entry, let's say e one, and server b wants to append entry e two. So server a solves the puzzle and publishes the solution. And I'm assuming that the solution is easy to check. So then server B sees the solution and checks that it's correct.", "metadataJson": "{\"start\":1856,\"end\":1881}"}, {"text": "So it cannot work that. Server B just simply republishes the solution with its own name and signing it by its own name. Because the puzzle for e two is different from the puzzle for e one. Right? Yeah.", "metadataJson": "{\"start\":1882,\"end\":1895}"}, {"text": "Okay. Yeah, exactly. And we'll see, we'll get into this in more detail in a second. According to steer, this is sort of the basic insight. There's of course not enough, but it will turn out to be enough to basically settle on a fork.", "metadataJson": "{\"start\":1895,\"end\":1908}"}, {"text": "So we're going to accept they're going to be forks and then we're going to have bitcoin basically accepts their forex, like in Sunderland, but then has a way of basically deciding which work to settle on.", "metadataJson": "{\"start\":1908,\"end\":1919}"}, {"text": "Yeah. So I had a question about network partitions and I was wondering how like, you know, if you were able to make a partition, like on the Internet, which, you know, it's probably unreasonable, but if you're able to partition the Internet, like the whole Internet, and couldn't you convince like, you know, one, like double spend by like spending on both sides of the partition? Yeah, the partition never heals to succeed. Like eventually you'd assume it heals, but then by then, right, like you probably would have gotten like something shipped or. Yeah.", "metadataJson": "{\"start\":1921,\"end\":1964}"}, {"text": "So in general. So we'll see, we'll talk a little bit more about it. But, like, there are all kinds of. There is ways of creating forks. And what you're describing is basically forks that persist for a long period of time.", "metadataJson": "{\"start\":1964,\"end\":1974}"}, {"text": "And we'll see. Basically, bitcoin basically produces these blocks with transactions every ten minutes. And if you're very conservative or you want to be careful not to avoid double spending or making sure that there's nothing with double spend, you generally wait for multiple of these blocks to peer, like five, six, or basically an hour before actually decide to actually accept, you know, the. To say, oh, yeah, that this is. I'm on the right fork.", "metadataJson": "{\"start\":1975,\"end\":2007}"}, {"text": "Thanks.", "metadataJson": "{\"start\":2009,\"end\":2010}"}, {"text": "Okay, so let's also see actually how the pieces fit together. So it turns out, you know, the. You don't do a proof of work per transaction. That would be crazy, because you got to spend a lot of computational power for that one single transaction that will limit the number of transactions you can actually do per second. And so the way actually this is done is basically, transactions are grouped in blocks, and proof of work is done on a block basis.", "metadataJson": "{\"start\":2018,\"end\":2049}"}, {"text": "So we have our network.", "metadataJson": "{\"start\":2050,\"end\":2051}"}, {"text": "The way it actually works is that we're not making a log of logs, but, like, we make a lot of transactions, we make actually a log of blocks, which are called basically, a blockchain.", "metadataJson": "{\"start\":2054,\"end\":2064}"}, {"text": "And so here we got our network reappears all around the world, and the log is basically a sequence of blocks.", "metadataJson": "{\"start\":2068,\"end\":2079}"}, {"text": "And so peers have copies of these. They may compute new ones, pen them and distribute them and flood them across the network. And so what is in a block at a very high level? Again, there are many more details that I'm just going to ignore. It's going to be the hash of the previous block, b minus one.", "metadataJson": "{\"start\":2082,\"end\":2106}"}, {"text": "So if this is block five, you know, this is going to be then, you know, before. So b minus one. So the unique identifier of the, basically the previous block in the chain, the transactions that are part of this block, and then anons, which we'll talk about in a second. But this is the thing that is going to play a crucial role in the. The puzzle and the timestamp.", "metadataJson": "{\"start\":2107,\"end\":2134}"}, {"text": "And, you know, this is about typically, obviously a little bit, but, you know, think about this roughly a megabyte block. So basically, the game is the peers, you know, collect transactions, then basically solve the puzzle. And once they solve the puzzle, they're going to ship the block to everybody in the network. Everybody can check whether the peer actually solved the puzzle correctly. And if the puzzle was correctly, correctly, and the transaction checkout and everything, the hashes check out, then they're going to basically accept that block as the next block in the chain.", "metadataJson": "{\"start\":2138,\"end\":2179}"}, {"text": "So in a little bit more detail, you know, when, you know, basically the winner gets to the site on the next blog. So we have a new blog, and this is basically going to be the proof of work which is done. Typically, the party that does the proof of work is called the miners, and we'll see in a second why.", "metadataJson": "{\"start\":2182,\"end\":2208}"}, {"text": "And basically the game that we're going to play is that the miner has to compute a hash of this new block that basically has n leading zeros.", "metadataJson": "{\"start\":2211,\"end\":2233}"}, {"text": "So and the way, you know, the miner can do that is basically by changing the nons. So basically the miner makes random guesses for nonce, computes the hash, and unchecks, you know, the number of leading zeros. And if the lead number leading zeros is n or larger, then basically that is a block that's going to be accepted. The only way you can think about it is that basically the hash value is below some particular, particular difficulty value. This end can be tuned over time, as we'll see in a second later, to adjust the difficulty.", "metadataJson": "{\"start\":2237,\"end\":2277}"}, {"text": "But on average, the amount of work that is necessary they're targeting is about roughly a cpu month of computation. And it's not really expressed in that way. It's really expressed in terms of number of hashes you can do per second. But then it boils down to sort of shooting for that kind of number. Of course, a lot of peers do this in parallel.", "metadataJson": "{\"start\":2279,\"end\":2304}"}, {"text": "I think the network is currently around 10,000 nodes. So 10,000 nodes might be and there might be many more miners, hundreds of thousands of miners, and they might get lucky. And you pick the right nons very quickly, and some of them actually get quickly. And so what they're shooting, sort of roughly, is that, you know, that the first one, you know, to actually solve the puzzle now takes about ten minutes.", "metadataJson": "{\"start\":2305,\"end\":2330}"}, {"text": "And, you know, by adjusting the difficulty, the protocol can sort of adjust, you know, the time or the time that it will take to actually, you know, compute one of these hashes and the sort of energy that one has to put into to actually solve the puzzle. And so whenever miner sort of solves this puzzle first, basically gets to spread the block across the network and basically has about ten minutes to do so. And so one reason that the ten minutes is there is that it will take a little bit of time to move that 1 block across the many, many peers that are in the network. And you want to make sure that there's enough time to sort of get the block out to many of the peers, so that you can avoid forks, as we'll see in a second. So before that, somebody else actually solves the puzzle too, professor.", "metadataJson": "{\"start\":2334,\"end\":2392}"}, {"text": "Yeah. So the number of leading zeros that hash needs to be accepted by a node. Is that number set by each node individually? No, no, no. This is part of the protocol.", "metadataJson": "{\"start\":2392,\"end\":2408}"}, {"text": "This is an agreed part.", "metadataJson": "{\"start\":2408,\"end\":2409}"}, {"text": "But what I mean is like, it's part of the protocol, but like, so, so well behaved nodes will follow it. But they. But who calculate, who calculates it? Is it a central server that calculates the sand and sends it out or every, no, no, we'll see in a second later, actually, how it's computed. But basically, I can give you a hint about how it's computed.", "metadataJson": "{\"start\":2414,\"end\":2442}"}, {"text": "One reason the timestamps are in these things is that if the time between blocks becomes too low, then the difficulty goes up.", "metadataJson": "{\"start\":2442,\"end\":2453}"}, {"text": "These timestamps, of course, are validated using the hashes and all the stuff and sit in the blockchain. Everybody sees the same blockchain, so they will compute the same difference between the timestamps and therefore make the same adjustment in terms of difficulty. Right. And this is one of the cool parts, correct, of having a log of everything that's in there. Like, if you have some determinist, you could compute any deterministic function of, like, the content of the log, right?", "metadataJson": "{\"start\":2455,\"end\":2479}"}, {"text": "Okay, so it would be a deterministic function. But, but at the end of the day, like, if I, like, try and get away with, like, sending less than n zeros, then each individual node in the network should call me out. Yeah, they will reject your solution because you don't have a real solution. Okay, thanks. So what stops an attacker from just constantly flooding the network with wrong solutions?", "metadataJson": "{\"start\":2479,\"end\":2507}"}, {"text": "Denial, search attack. Hopefully one of the, turns out that the checking the solution is very easy, and so it's easy to quickly reject an incorrect solution.", "metadataJson": "{\"start\":2508,\"end\":2518}"}, {"text": "Thank you. And how are the timestamps determined? Does each block set the timestamp on its own, or the miner that successfully mined sets the timestamp in the block? And what if they just set the timestamp to be longer than it took so that it becomes less difficult? They can't lie too much.", "metadataJson": "{\"start\":2521,\"end\":2543}"}, {"text": "Correct. They have a ten minute window, roughly to lie. I don't really know exactly how the timestamp is checked. I don't know. Might imagine that it's solvable.", "metadataJson": "{\"start\":2543,\"end\":2552}"}, {"text": "How do peers get the transactions that want to be appended to the block? Thank you. That's the next slide. So blocks and transactions.", "metadataJson": "{\"start\":2555,\"end\":2567}"}, {"text": "So let's assume, like, there is some block b five that already has been computed that sits in the log points whatever to b four. And so we're a miner. We're working on. We got a blog with that is we're mining on. So it has a bunch of transactions.", "metadataJson": "{\"start\":2577,\"end\":2598}"}, {"text": "And we're basically trying to compute the solution to this puzzle. And so new transactions come in. They arrive. And so the new transactions, actually they call the memory buffer. Buffer.", "metadataJson": "{\"start\":2598,\"end\":2612}"}, {"text": "They go in some buffer and basically they're going to, when the next walk is going to be at some point, this guy, let's say this is one miner miner.", "metadataJson": "{\"start\":2612,\"end\":2625}"}, {"text": "So let's say minor I is the lucky one. Actually, minor I computes the new b six. And so at some point, b six is the new next head of the log, which contains a bunch of transactions. And so while miner I was actually trying to hash computing, do many, many, many hashes to actually solve the puzzle. New transactions come in.", "metadataJson": "{\"start\":2627,\"end\":2654}"}, {"text": "And so soon as the Mineri is done with V six, it basically selects the number of transactions, puts a new block together, a partial block. It's not the one that is solved yet. Transactions in from the pool, whatever updates whatever needs to be updated, and then starts hashing on that one and hoping to solve it so that that can be added to the transaction log at some point later if it's succeeds. Of course, if somebody else succeeds in solving the producing b seven before minor I, minor I is going to switch to the b seven of that blog, remove any transactions that ended up already in b seven and continues with the transactions that are left and that are not in b seven yet. That's the plan for how transactions and blocks interact with at a high level.", "metadataJson": "{\"start\":2654,\"end\":2710}"}, {"text": "So as transactions come in, like, you try to calculate the nonce for a block that will give you n leaving zeros, new transactions will come in. They're not part of that block. They're going to be sitting on the site there for the next block. Okay. Could you, could you add, could you add them to the.", "metadataJson": "{\"start\":2712,\"end\":2740}"}, {"text": "That would change the hash, right. But I mean, you just need to keep trying to get like a valid nonce, right. You also have, there's a limit on the block size. You know, the block size can't be bigger than one. One.", "metadataJson": "{\"start\":2740,\"end\":2753}"}, {"text": "Some particular predefined constant by protocol. You know, there's a bunch of other reasons. You know, once you fill up the blog, you know, with your transactions, you keep going hashing until, you know, you find a solution. Okay. Or you get.", "metadataJson": "{\"start\":2754,\"end\":2768}"}, {"text": "Or you receive a new one and then you reject and you go work on the next one. Okay, thanks. So when, when someone, when a miner, like, loses and do they like, like, is it possible for a miner never to make profit out of this because they keep, like, losing because they don't have enough competition? Yeah, absolutely. If I would start mining with my laptop, I'm pretty sure I would make no money.", "metadataJson": "{\"start\":2769,\"end\":2794}"}, {"text": "And the transaction pool, it is local? Yeah. Every, every node maintains this transaction pool as they receive transactions from other nodes in the network. You know, they keep that transaction pool and, you know, they use that transaction pool basically to fill the next block. So you want to all kinds of rules how you should select transactions, which I'm not going to talk about.", "metadataJson": "{\"start\":2797,\"end\":2822}"}, {"text": "Okay. So to append, you need to tell your transaction to everyone. Yes. Or you tell to a bunch of peers and they will flood it for the rest of you to the rest of the network.", "metadataJson": "{\"start\":2822,\"end\":2834}"}, {"text": "So from my understanding, when a miner successfully mines or verifies a transaction, they get rewarded. They did this verification, but they can also lie when it comes to the timestamp. So let's say that you have two verifiers and they're both working on the same block, and they almost simultaneously verified at the same time. But one of them was, you know, they lied and they made the time step a bit earlier. So kind of they.", "metadataJson": "{\"start\":2838,\"end\":2868}"}, {"text": "But there's difficulties chosen for a period of time, like for the next, like 20. You know, there's a whole bunch of serious block. It only changes periodically. You can't change it arbitrarily. So what was that?", "metadataJson": "{\"start\":2868,\"end\":2880}"}, {"text": "I'm sorry, I think I missed that line. The difficulty is not changed on every block. It is periodically changed after some number of blocks have been computed. And so it's done in the back. Everybody can see what these timestamps are.", "metadataJson": "{\"start\":2881,\"end\":2896}"}, {"text": "I think it's every. I forgot what the exact number of blocks is when the difficulty is adjusted. I see. Thank you. So at that point, you already agreed on all those blogs in the past, so everybody's in agreement on, like, what the timestamps are that we're going to actually use to actually compute a new velo blog.", "metadataJson": "{\"start\":2897,\"end\":2917}"}, {"text": "So I had one question about achieving consensus. I guess, like, all of this, like, relies on, like, pretty much every node running the same code. Right. Or at least following the rules very, very precisely. Yep.", "metadataJson": "{\"start\":2920,\"end\":2939}"}, {"text": "Like, what happens if there's a bug in my code, in the code that I'm running, maybe a bug in a bunch of different nodes. Does that throw off all notions of consistency? Potentially? Well, yeah, long as the majority, as we'll talk a little bit more about it. As a majority of the nodes actually runs the right code, you know, everything should work out.", "metadataJson": "{\"start\":2939,\"end\":2964}"}, {"text": "Right. But like if there's a trapdoor in the code, yeah, you got a problem. Like if there's a trap door in Linux, you got a problem too. So does every node run like the same code or are there different. No, there are a couple of different bitcoin versions around.", "metadataJson": "{\"start\":2964,\"end\":2981}"}, {"text": "We'll talk a little bit more about it in a second. But there are sort of the main core they're called. And they're like, it was like an open source project like Linux is. It has maintainers and code review and all that kind of stuff. And most like the wallets and most of the sort of the peers will run one of the standardized version, basically.", "metadataJson": "{\"start\":2981,\"end\":3003}"}, {"text": "Thanks.", "metadataJson": "{\"start\":3004,\"end\":3005}"}, {"text": "Okay, forks. So we know now like what the rule is, you know, who can actually extend the log or the chain, the blockchain. You can still have forks. Okay? Because New York chain b five, b six.", "metadataJson": "{\"start\":3011,\"end\":3031}"}, {"text": "And somebody might actually get sort of lucky and sort of roughly compute b seven two b seven s at the same time. Here we got b seven prime and here we got b seven double prime.", "metadataJson": "{\"start\":3031,\"end\":3043}"}, {"text": "And that would be problematic for us because maybe one of these, this chain has the dissection, you know, the y two, whatever, is it y two z? Yeah, and maybe this one has the y to q.", "metadataJson": "{\"start\":3046,\"end\":3060}"}, {"text": "We want to sort of make sure that we actually settle in the end of one chain. There's two reasons why these change might develop. One is the people or participants find the nonce at the same time or roughly at the same time. And the second one is that there may be a slow network.", "metadataJson": "{\"start\":3063,\"end\":3087}"}, {"text": "And so a peer might receive from two nodes that are in different ends of the network at some point, these two new solutions. And basically, you know, when a node ends up in this situation, it basically does nothing. And you sort of keeps the fork around and just waits to see which fork gets extended. And so, you know, maybe this fork, the bottom one, you know, will get extended with, you know, b eight. And then the rule is very simple, you know, the pier switches, switches to longest fork.", "metadataJson": "{\"start\":3090,\"end\":3125}"}, {"text": "And so basically, you know, all the transactions that might have learned about in this fork in the top fork are just going to disappear. There's going to not matter in the system because in the end all the good nodes will actually agree on the longest chain and, you know, basically proceed, you know, mining along the longest chain. That's the basic plan. And so let's look a little bit about like how would that solve our double double spending problem. Oh, wait, I have a question on your slide.", "metadataJson": "{\"start\":3131,\"end\":3167}"}, {"text": "Yep. I'm going to continue on the previous slide in this slide. Oh, okay. So let me ask the question. So, so even if the.", "metadataJson": "{\"start\":3167,\"end\":3176}"}, {"text": "In the, in the second. Cause like the slow network, can't you detect that if you, if the miner included the timestamp where they, when they found the solution.", "metadataJson": "{\"start\":3176,\"end\":3187}"}, {"text": "Okay, the, you might, you know, already be suspicious or may agree on what actually the next, you know, what the right, probably the right chain is, but it will be confirmed later by future blocks. And you use the future blocks to really decide what the longest chain is. Okay.", "metadataJson": "{\"start\":3192,\"end\":3211}"}, {"text": "Okay. Double spending. So let's talk about sort of two easy two cases. The first one is easy, you know, y since the y two z and y two q to some peer or to the peers. And basically what will happen in this case is that if it's a well behaving peer, you'll see like, hey, you know, two transactions that actually spent the same money twice going to reject that.", "metadataJson": "{\"start\":3215,\"end\":3246}"}, {"text": "So a peer that receives, you know, is trying to or miner that is going to construct a blog, you know, we'll actually validate all the transactions before they sticks them in the blog. So this will, you know, don't really, this is not going to work. Minor is going to reject. Good. Minor.", "metadataJson": "{\"start\":3246,\"end\":3260}"}, {"text": "Okay. The second vice, the more instinct cases visually, y sends, you know, y to z, you know, to some set of the peers and, you know, y to q to another set of peers and, you know, where you and, you know, and might, you know, maybe, you know, the, maybe the one pool is bigger than the other pool, but it could actually end up in a situation where basically, you know, we get the chain like as before. And basically there, once it appears, you know, computes, you know, the hash where that includes Y to Q and the other one computes a block that actually contains Y to Z. This looks like a double spending thing. And so if you're Z correct, like Z was the person that is going to decide whether to accept this transaction and hand out the latte.", "metadataJson": "{\"start\":3264,\"end\":3326}"}, {"text": "What you do is you're going to wait and you're going to wait until there's a bunch of more blocks that are behind it. And typically it's five six, up to five six, you know, for a very valuable transaction, maybe not for a latte, but if you're buying a car, you really want to make damn sure that you're going to get your money and that why didn't double spend the money. And so you may wait for a while, until new hack ended to a new blocks have been extended to the blockchain. And, you know, once you have five or six, as the paper does some calculations, you can be pretty confident, and you can be very confident that it's unlikely, you know, for attacker to basically compute a new chain and sort of overtake, you know, the longer chain. Right.", "metadataJson": "{\"start\":3326,\"end\":3378}"}, {"text": "Let's say this is the attacker. The attacker has less computational power. You know, presumably the assumption behind this whole paper has less computational power than all the good people. And so if the good people have more computational power, it's going to be impossible for the attacker, or unlikely or legitimately impossible or unlikely for the attacker to basically compute faster and actually make a chain that is longer than the good chain. And so that's sort of the key assumption that's behind all this.", "metadataJson": "{\"start\":3378,\"end\":3408}"}, {"text": "Among this reasoning, basically, Z just has to wait for a while until the good guys extended the chain long enough that Z is completely convinced that it's impossible for a set of attackers to actually out compute the good people. And at that point, Z can just accept the transaction and say, this is a legit transaction if everything else checks out, and hand over the latte or the car. To. To Z or. Yeah, to y, I guess.", "metadataJson": "{\"start\":3410,\"end\":3444}"}, {"text": "Sorry, quick question. Who distributes the puzzles?", "metadataJson": "{\"start\":3446,\"end\":3449}"}, {"text": "There's no distribution. The puzzles necessary. Right. The puzzle is predetermined. The puzzle is you have to compute a hash over the block that has enough leading zeros so there's no distribution or deposit.", "metadataJson": "{\"start\":3451,\"end\":3471}"}, {"text": "The only thing that's distributed, maybe, is the difficulty. But as we talked a little bit earlier, that sort of adjusted over time in a deterministic way. Thank you. So there's all these transactions that are happening, and then through some gossip protocol or something, the transaction is distributed to all the nodes, and then somehow there's agreement on what set of transactions are packaged into a block. So everyone has agreement on what the block is?", "metadataJson": "{\"start\":3471,\"end\":3500}"}, {"text": "No, no, no. Compute the miner. Oh, no, no, no. The miner receives transactions right here. Where was it?", "metadataJson": "{\"start\":3500,\"end\":3509}"}, {"text": "Block. There was some slide on, I think, the next one. Yeah. Blocks and transactions. So the miner basically minor.", "metadataJson": "{\"start\":3512,\"end\":3520}"}, {"text": "I. You know, you receive transactions over the network, and it just decides which transactions go in that block, and it starts computing, and if it wins, that is the transactions that go in that block. I see. Okay, so that determines that the total order. Right.", "metadataJson": "{\"start\":3520,\"end\":3535}"}, {"text": "You know, the total order is determined by all the previous blocks, you know, plus this new block, and within the block, you know, basically minor. I has decided what goes in. There's some complicated rules that miners are supposed to follow. But, you know, basically the miner gets to decide. Thank you.", "metadataJson": "{\"start\":3535,\"end\":3551}"}, {"text": "And there's sort of incentive systems for the miners to do the right thing. So let me actually talk a little bit about this. So, so far, you know, we've seen, you know, the, this puzzle that's sort of the core of this proof of work idea to the core of actually achieving consensus. And but, you know, this requires the miners actually do quite a bit of work. You know, like they have to hash, hash, hash.", "metadataJson": "{\"start\":3556,\"end\":3581}"}, {"text": "You have to have a serious computer. You know, it's a month, sort of roughly a month of work. Right? And so why would a miner do that? And so there's an incentive system for to encourage miners to actually play this role.", "metadataJson": "{\"start\":3581,\"end\":3593}"}, {"text": "And, you know, there's a rule that basically there's a bunch of bitcoins reserved in the pool, like when the first bitcoin transaction was created and miners get paid or rewarded out of that pool. And so basically the first transaction, transaction in a block is basically a reward for the miner.", "metadataJson": "{\"start\":3602,\"end\":3629}"}, {"text": "And so basically the miner can insert introduction in the first introduction in the first slot where that basically lists the miner's public key and transferring money out of the pool to himself or herself. And that is the way the miners get, actually get a return or a reward for actually the work they do. That reward changes over time. Currently, I think today I think it's 6.25 bitcoin to actually mine a block. But this changes over time.", "metadataJson": "{\"start\":3633,\"end\":3674}"}, {"text": "It actually has sort of a halving rule that reduces half the, like a couple of years ago, it was 12.5 bitcoin in the wild will be whatever, three point whatever they have of 625. And I think if I remember correctly, every 210,000 blocks, that number halves until it runs into the finest bitcoin denominator and then basically stops. But we're a while away before that actually is the case. If that happens, then the idea is that to mine actually block, every transaction pays a little fee. And the miner collects the fees from all the transactions in the block and rewards the miner with those fees.", "metadataJson": "{\"start\":3674,\"end\":3728}"}, {"text": "Even now, there are some fees to ensure that basically the transactions are not frivolous. And so really the miner actually earns not only the 6.25, but also like the fees that actually, the fees that actually go along with the transactions.", "metadataJson": "{\"start\":3729,\"end\":3748}"}, {"text": "Okay, so that's the minor incentive.", "metadataJson": "{\"start\":3751,\"end\":3753}"}, {"text": "Bitcoin has gotten so successful that basically there's sort of an arms race in miners.", "metadataJson": "{\"start\":3756,\"end\":3761}"}, {"text": "And this is like, for example, why, if I would want to participate and actually win and make some money, I'm going to lose because the series miners are much better at computing hashes at a very high rate than your standard laptop can. There's a couple things that are actually going on in this arms race. First of all, the miners form pools.", "metadataJson": "{\"start\":3764,\"end\":3787}"}, {"text": "The basic idea is that the miners collaborate with each other and they share the revenue with each other. And so, like, you know, if you pull many, many, many nodes, you know, maybe from different people, many computers from different people, the, you know, the people can share sort of the revenue stream out of mining. And because they do this, a pool, you know, they're more likely to actually win once in a while. And, you know, of course, probabilistically, they have some chance to win and basically, you know, spread sort of the income stream in a more stable form across all the miners in a single pool. If you look online today, there are some really large pools, and I think, like, the three biggest pools contribute more than 50% of the mining power.", "metadataJson": "{\"start\":3793,\"end\":3843}"}, {"text": "Sorry, why? Is this why? You said that each block takes, like, around ten minutes to mine, even though it takes a month of cpu power? Oh, yeah. On average is a month.", "metadataJson": "{\"start\":3846,\"end\":3860}"}, {"text": "But you're going to have some lucky. You pick the nonce. You can get lucky and actually pick a nonce that actually allows you to solve the problem much quicker. There's always some probability the nonce is some big number, and if you pick the right number, you can get lucky. And if many, many, many miners do that, there's actually a chance that it's going to take much less than a month.", "metadataJson": "{\"start\":3860,\"end\":3883}"}, {"text": "And in fact, that's why where the ten minutes comes from. Wait, so is the month more important or ten minutes more important? Because if there was only one minor. Right, and the expected is one month, on average, it would take one month. Right?", "metadataJson": "{\"start\":3883,\"end\":3898}"}, {"text": "Yeah, but the assumption is there are many, many minors. But wouldn't it vary, like, if there's a lot more minor minors? Now, there's a lot of variation, but on average is ten minutes. So it's picked that on average, it comes out to be ten minutes. Okay.", "metadataJson": "{\"start\":3898,\"end\":3916}"}, {"text": "Is it ever possible that, like, a puzzle is impossible?", "metadataJson": "{\"start\":3918,\"end\":3921}"}, {"text": "Uh, no, I don't think so. It may take a long time. There is going to be a.", "metadataJson": "{\"start\":3923,\"end\":3930}"}, {"text": "There's going to be. You get to pick the nonce. Correct. And there's going to be a case where the hash is going to fall within the leading zeros since the value of bitcoin is actually very, let's say, volatile. Yes.", "metadataJson": "{\"start\":3934,\"end\":3954}"}, {"text": "And so then how can we actually ensure that the incentive system for the miners is still adequate to keep this thing going for the future. I mean, since the number of, like, since, like, the reward is predetermined, let's say to be 6.25 bitcoins, what if for some reason the bitcoin value just dropped and then the incentive is not good enough for the miners and so just, yeah, you know, like, there's absolutely no value for miners to do this, then, you know, the bitcoin network will collapse. And presumably the way this is going to work out is that the transaction fee is going to go up, but then if the transaction fees go up, then it will, it will be a counter incentive for people who. To do the bitcoin. Yeah, but like, you know, if everybody's on the bitcoin network, you know, you want to trade goods, you know, you have to deal with somebody on the bitcoin network.", "metadataJson": "{\"start\":3956,\"end\":3999}"}, {"text": "So there's all kinds of, you know, sort of company related analysis that I'm not going to, like, you know, predict on, like, what is going to be the outcome. Okay. I guess we're seeing 21 40. And that's sort of the point where I think the reward system runs out and it's going to be all based on transaction fees and with the current rate. I see.", "metadataJson": "{\"start\":3999,\"end\":4020}"}, {"text": "Okay, so the other thing that's going on is, you know, people build special hardware, and there are companies that, you know, will deliver boards, you know, that are really good at fast and hashing. And these are used by the mining pools. People try to have high speed links to many peers so that if they find a block, they can actually get it out first and so they win, et cetera, et cetera. So this is a, you know, if you're interested in this, you can read lots and lots of information about it online, but, you know, still the system seems to be sort of hanging together.", "metadataJson": "{\"start\":4024,\"end\":4059}"}, {"text": "Okay, let me talk a little bit about a whole bunch of sort of practical issues that I sort of ignored, although we touched on it a bit.", "metadataJson": "{\"start\":4063,\"end\":4070}"}, {"text": "So first ten minutes, I think the ten minutes is basically the time upper bound or if you will, ten times the time roughly to flood the network.", "metadataJson": "{\"start\":4078,\"end\":4095}"}, {"text": "So bitcoin wants to try to avoid these sort of frivolous forks where basically two nodes at the same time roughly compute and therefore extend the chain roughly at the same time and want to try to avoid that. And so one way to avoid that is to basically give enough time to the nodes to sort of get the, the block out, you know, to many, many, many peers. So that most peers actually know about it and, you know, so that's why the ten minutes comes from.", "metadataJson": "{\"start\":4100,\"end\":4135}"}, {"text": "Of course, the block size determines the number of transactions per second.", "metadataJson": "{\"start\":4137,\"end\":4146}"}, {"text": "The block size, roughly a megabyte. And so, you know you're going to do one block per roughly ten minutes. Then the number of transactions is limited to the number of transactions that fit in a single block, and that is the number of transactions you can do. And it turns out that for today, that the number of transactions is like in the thousands per second. You work out the numbers and that's sufficient.", "metadataJson": "{\"start\":4149,\"end\":4184}"}, {"text": "For example, probably the analogy that people always make sort of bigger than the visa network, more transactions, and visa can process, but presumably it's not big enough to actually basically run all transactions, money transactions in the world, across another big. I'll come back to this in a second. Another sort of big issue is that changes to the protocol changes require consensus.", "metadataJson": "{\"start\":4184,\"end\":4215}"}, {"text": "In some cases, this is easy.", "metadataJson": "{\"start\":4222,\"end\":4224}"}, {"text": "Some changes are easy.", "metadataJson": "{\"start\":4226,\"end\":4228}"}, {"text": "One easy change is, for example, the number of leading zeros. There's basically a deterministic algorithm to compute from the past log entries what the difficulty is going to be for future puzzles. And since that is a deterministic function of the log, that changes basically and easy. And there's a bunch of other parameters in the protocol that have that kind of flavor. Some changes, however, result in a soft fork.", "metadataJson": "{\"start\":4232,\"end\":4262}"}, {"text": "We talked a little bit about, let's say, the main software, the main distribution, the core distribution for bitcoin wants to make a change that is sort of incompatible. Then you're going to have old clients, clients running with the old software, or peers running with the old server, and new peers with the new software. And that will temporarily create some forks. Of course, there's some communication going on, and in the long run, probably people will settle on the new fork with the new shopper. Some changes actually result in a hard fork for it.", "metadataJson": "{\"start\":4270,\"end\":4315}"}, {"text": "So, for example, there was, a couple years ago, there was a lot of discussion about this block size, because some people in the community want to increase the block size, some other people don't want to increase the block size, and basically they split. And there's correspondingly two bitcoin forex running.", "metadataJson": "{\"start\":4317,\"end\":4337}"}, {"text": "In fact, there's probably more than two. But like that one resulted in a hard work and a hard fork split. And so sort of an interesting, you know, aspect of this consensus. You know, that kind of systems that, you know, you're going to have these kinds of practical problems that actually can really either into soft works or in hard forks, as people just don't want to collaborate on a particular form.", "metadataJson": "{\"start\":4342,\"end\":4364}"}, {"text": "Any questions about this?", "metadataJson": "{\"start\":4366,\"end\":4367}"}, {"text": "What happens in hard forks, like, you have two different blockchains, and clients have to choose in which fork they want to be interesting or publish their transactions in both. I don't know. I mean, but you have, like, I mean, say I have like a couple bitcoin. I'll have a couple, like, bitcoin in both forks. Right.", "metadataJson": "{\"start\":4370,\"end\":4396}"}, {"text": "But I can start spending them in either, like. Well, you have. You have bitcoins in the prefix of those. So both forks have the prefix, so you can't double spend your money. Huh.", "metadataJson": "{\"start\":4396,\"end\":4411}"}, {"text": "Well, so actually, in the case of, like, when bitcoin, there was a hard fork and they. And the. One of the new forks was called bitcoin cash. Yeah, exactly. All the tokens were duplicated, but then the value of the tokens, it wasn't like you doubled your values.", "metadataJson": "{\"start\":4411,\"end\":4429}"}, {"text": "The price of bitcoin decreased, and then the difference in that decrease was the value of the bitcoin cash. So think of it like a stock split. You get more tokens, but the actual value would stay the same because you're just increasing the supply of tokens. Okay, great. Thank you.", "metadataJson": "{\"start\":4429,\"end\":4449}"}, {"text": "Any other questions?", "metadataJson": "{\"start\":4452,\"end\":4453}"}, {"text": "Okay, good. Let me summarize that.", "metadataJson": "{\"start\":4459,\"end\":4461}"}, {"text": "So basically what we've seen here is distributed consensus with. In an open distributed systems with potentially byzantine participants. Let's see. My program crashed. Hold on a sec.", "metadataJson": "{\"start\":4468,\"end\":4487}"}, {"text": "So this is the consensus with potentially byzantine participants.", "metadataJson": "{\"start\":4510,\"end\":4515}"}, {"text": "And, you know, the, you know, the thing that actually is being reached consensus on is this public ledger, or a public log, if you will, that basically orders all the transactions ever since the beginning of time, and allow people to check what the balances are of every public key and avoid double spending. And, you know, the particular cool sort of idea here is to basically just proof of work idea to determine actually who is allowed to extend the blockchain. Okay, so that's basically all I wanted to say. And so if you need to run and leave, feel free to leave. This is basically the end of this lecture.", "metadataJson": "{\"start\":4523,\"end\":4576}"}, {"text": "Anybody who wants to stay and ask more questions, please feel free to stay. On Thursday, there's no lecture. It's a hacking day. As you know, the Friday is the deadline for the final project or lap for whatever you'll be doing. So good luck trying to get that work finished and we'll talk then.", "metadataJson": "{\"start\":4576,\"end\":4595}"}, {"text": "The next class meeting is next Tuesday. Okay, thank you.", "metadataJson": "{\"start\":4596,\"end\":4600}"}, {"text": "Could you talk a little bit more about the proof of stake?", "metadataJson": "{\"start\":4604,\"end\":4607}"}, {"text": "There's a. Sure. I'm not sure I have a ton to say about it.", "metadataJson": "{\"start\":4609,\"end\":4613}"}, {"text": "If you want to know any more details, just Google proof of stake. You'll find a whole lot of different bitcoin currencies that use it. And I'll tell you in more detail, but basically, the power in the network is proportional to your stake in the network. And the basic idea is that, like, if you own, like, whatever, 3% or 10% of all the bitcoins, you know, you get sort of to decide 10% of the new blocks, and you're going to have incentive. You know, the higher your stake, you know, the higher incentive is actually to play the game correctly, so the profit becomes more deterministic in that case.", "metadataJson": "{\"start\":4616,\"end\":4658}"}, {"text": "Right.", "metadataJson": "{\"start\":4658,\"end\":4659}"}, {"text": "It all depends on the details of the protocol. Like in algorithm, basically, there's a periodical leader, there's a committee election, and then the committee decides on what the next block is. And then there's a new leader and the new committee election, et cetera, et cetera. And many aspects of that are probabilistic and randomized so that the attacker can win the game.", "metadataJson": "{\"start\":4662,\"end\":4687}"}, {"text": "These protocols are quite sophisticated.", "metadataJson": "{\"start\":4695,\"end\":4697}"}, {"text": "Also, to be able to mine, you have to have all of the log to verify the transactions. Right? Yes. Yeah. So the miners have a complete copy of the walk, which is gigabytes.", "metadataJson": "{\"start\":4707,\"end\":4720}"}, {"text": "Isn't that a lot? It turns out not to be totally doable for a reasonable computer. Okay. Thank you. You're welcome.", "metadataJson": "{\"start\":4721,\"end\":4733}"}, {"text": "This is unrelated to the lecture, but do you think it'd be possible to talk about during the classroom time, like the design that tas and that you had for labs three and four because it was more open ended? Yeah, certainly lab four is more open ended. I was not planning to. I don't know we have time left to do so. First of all, not everybody has done lab four, so I currently have no intention to do so.", "metadataJson": "{\"start\":4739,\"end\":4768}"}, {"text": "But of course, you can reach out in office hours and talk to the tas or reach out later to me, and we can talk about lab three and lab four. Sounds good. Thank you. You're welcome.", "metadataJson": "{\"start\":4768,\"end\":4781}"}, {"text": "So I had a question about, like, it says. It says on the paper, like, or rather, sorry.", "metadataJson": "{\"start\":4786,\"end\":4796}"}, {"text": "Yeah, once. Once the latest transaction, the coin is buried under enough block the spend transaction before it can be discarded to save disk space. Yeah. Yeah. Like, I understood, though, that, you know, blockchain never really, like, discards transactions.", "metadataJson": "{\"start\":4798,\"end\":4821}"}, {"text": "It keeps, like a whole log of all the transactions. Why is this, like, why was this done in practice? To save space on the. Save space on the allow space compaction on the nodes. And the miners, so they have to keep track of every, every transaction in the log for every, basically bitcoin.", "metadataJson": "{\"start\":4821,\"end\":4846}"}, {"text": "They have to keep track of the last one and that's sufficient. And so one way to think about it is sort of like you could compute a snapshot in time of all the values of all the coins, and then you don't really have to remember the whole past. Who does keep the whole past? Then there's two things. One is like when you check whether transaction is valid.", "metadataJson": "{\"start\":4846,\"end\":4873}"}, {"text": "Go. You scan the whole logic. People don't do that, you know, they take forever. They basically build a data structure that is quite compact and has the last transaction for every unspent coin.", "metadataJson": "{\"start\":4873,\"end\":4886}"}, {"text": "You can totally download the whole log if you want to, from the Internet and it is maintained and store it to basically, if they lose all their data, they can compute all the balances basically from running all the trajectory from beginning of time.", "metadataJson": "{\"start\":4889,\"end\":4905}"}, {"text": "But so like if people are like, who maintains the whole block? Like the whole transactions replicated everywhere, right? Like everybody wants to have a copy of the log, right? But, but if most people are doing this, it's cardiing, like transactions. Like why would someone keep, like the whole, like this is not good enough to actually keep track of.", "metadataJson": "{\"start\":4908,\"end\":4933}"}, {"text": "This allows you to decide where a transaction was actually happened in the past, but it doesn't allow you to validate transactions. So if you want to validate transaction, you have to keep the path. Okay. Okay, thanks.", "metadataJson": "{\"start\":4933,\"end\":4947}"}, {"text": "Any more questions?", "metadataJson": "{\"start\":4952,\"end\":4954}"}, {"text": "Okay, thanks.", "metadataJson": "{\"start\":4957,\"end\":4958}"}]}